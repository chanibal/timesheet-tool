#!/usr/bin/env node

"use strict"

// console.log("Timesheet:" + process.argv[fi]);

function formatTime(m) {
	var h=~~(m/60);
	m-=h*60;
	return h+"h"+("00"+m).slice(-2)+"m";
}

var showRealTime = false;


var msum=0;
var msumreal=0;
var errors=false;

for(var fi=2; fi < process.argv.length; fi++)
require("fs").readFile(process.argv[fi], "utf-8", function(error, data) {
	if(error)
		throw error;
		
	var entryRegex=/^(\d{4})-(\d{2})-(\d{2})\s+(\d{1,2}):(\d{1,2})-(\d{1,2}):(\d{1,2})\s+(.+)$/;
	var entryHoursRegex=/^(\d+)\s*h(\d+)m\s+(.+)$/;
	var tagRegex=/\[([^\]]+)\]/g;
		
	var previousLog;
	
	var entries = {};

	function processLog(entry) {
	
		var log = entry.log;
		if (log == "..." || log == "-||-") {
			if (!previousLog)
				throw "Cannot continue previous message if there was none";
			log = previousLog;
		}
		previousLog = log;

		var minutes = entry.t;
	
		var multipiler = 1;
	
		var tag;
		while((tag=tagRegex.exec(log))) {
			tag=tag[1];
			var multi=/^x\s*(\d+)$/.exec(tag);
			
			if(multi)
				multipiler = parseFloat(multi[1]);
				
			else if(tag == "bug" || tag == "feature")
				;
				
			else {
				console.warn("?? tag: "+tag[1]);
				errors=true;
			}
		}
		
		msumreal += minutes;	
		msum += minutes * multipiler;

		// console.log(formatTime(minutes)+"\t"+log);
		if (entries[log]) {
			entries[log].rawtime += minutes;
			entries[log].time += minutes * multipiler;
		}
		else {
			entries[log] = {
				rawtime: minutes,
				time: minutes * multipiler
			};
		}
		// var hours=Math.abs(100*minutes/60)*0.01;
	};
	
	data.split("\n")
		.map(function(l) { return l.trim(); })
		.filter(function(l) { return !(l == "" || l[0] == "#"); })
		.map(function(l) {
			var e;
			if((e=entryRegex.exec(l))) {
				// new Date(year, month, day, hours, minutes, seconds, milliseconds)
				var start=new Date(e[1], e[2], e[3], e[4], e[5], 0, 0);
				var end=new Date(e[1], e[2], e[3], e[6], e[7], 0, 0);
				if(start > end)	// midnight occurred
					end.setDate(end.getDate()+1);
				var minutes=(end-start)/(1000*60);
					
				var log=e[8];
				
				return { log:log, t:minutes, all:l };
			}
			else if((e=entryHoursRegex.exec(l))) {
				var minutes=parseFloat(e[1])*60+parseFloat(e[2]);
				var log=e[3];
				return { log:log, t:minutes, all:l };
			}
			else {
				console.warn("?? ", l, l.no);
				errors=true;
				return null;
			}
		})
		.filter(function(e) { return e != null; })
		.forEach(processLog);
		
// 	if(fi == process.argv.length-1) {
		for(var log in entries) {
			if (!entries.hasOwnProperty(log)) continue;
			var time = entries[log];
			if(showRealTime)
				console.log(formatTime(time.time)+"\t("+formatTime(time.rawtime)+")\t"+log);
			else
				console.log(formatTime(time.time)+"\t"+log);
		}

		console.log("-----");

		if(showRealTime)
			console.log(formatTime(msum), "\t(" + formatTime(msumreal) +")\ttotal billable (total real)");
		else
		console.log(formatTime(msum), "\ttotal");

		if(errors)
			console.warn("WARNING: Some parts of timesheet were not undestood!");
//	}
});

